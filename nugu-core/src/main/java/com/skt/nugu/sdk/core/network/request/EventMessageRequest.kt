/**
 * Copyright (c) 2019 SK Telecom Co., Ltd. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http:www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.skt.nugu.sdk.core.network.request

import com.google.gson.Gson
import com.google.gson.JsonObject
import com.google.gson.annotations.SerializedName
import com.skt.nugu.sdk.core.utils.UUIDGeneration
import com.skt.nugu.sdk.core.interfaces.message.MessageRequest

/**
 * Class for requesting a directive message
 * @param dialogRequestId the id for request that generated by client.
 * @param messageId the unique id for the message
 * @param context the context for the message
 * @param name the name of directive
 * @param namespace the namespace of directive
 * @param version the version
 * @param payload the payload (json formatted string).
 */
data class EventMessageRequest(
    @SerializedName("messageId")
    val messageId: String = UUIDGeneration.shortUUID().toString(),
    @SerializedName("dialogRequestId")
    val dialogRequestId: String = UUIDGeneration.timeUUID().toString(),
    @SerializedName("context")
    val context: String,
    @SerializedName("namespace")
    val namespace: String,
    @SerializedName("name")
    val name: String,
    @SerializedName("version")
    val version: String,
    @SerializedName("payload")
    val payload: String = JsonObject().toString()
) : MessageRequest {
    companion object {
        /**
         * serialized a EventMessageRequest
         * @param json is json formatted string
         */
        fun from(json: String): EventMessageRequest {
            return Gson().fromJson(json, EventMessageRequest::class.java)
        }
    }
    /**
     * unused code
     */
    fun toGson(): String {
        return Gson().toJson(this::class.java)
    }
}